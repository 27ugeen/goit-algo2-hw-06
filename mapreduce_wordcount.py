import string
import requests
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor
from collections import defaultdict

def get_text(url):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–µ–∫—Å—Ç –∑–∞ URL."""
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.text
    except requests.RequestException:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç.")
        return None

def remove_punctuation(text):
    """–í–∏–¥–∞–ª—è—î –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó –∑ —Ç–µ–∫—Å—Ç—É."""
    return text.translate(str.maketrans("", "", string.punctuation))

def map_function(word):
    """–§—É–Ω–∫—Ü—ñ—è Map: –ø–æ–≤–µ—Ä—Ç–∞—î –ø–∞—Ä—É (—Å–ª–æ–≤–æ, 1)."""
    return word.lower(), 1  # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ —Å–ª–æ–≤–∞ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä

def shuffle_function(mapped_values):
    """–§—É–Ω–∫—Ü—ñ—è Shuffle: –≥—Ä—É–ø—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ —Å–ª–æ–≤–∞–º–∏."""
    shuffled = defaultdict(list)
    for key, value in mapped_values:
        shuffled[key].append(value)
    return shuffled.items()

def reduce_function(key_values):
    """–§—É–Ω–∫—Ü—ñ—è Reduce: –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Ö–æ–¥–∂–µ–Ω—å —Å–ª–æ–≤–∞."""
    key, values = key_values
    return key, sum(values)

def map_reduce(text, search_words=None):
    """–í–∏–∫–æ–Ω—É—î MapReduce –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —á–∞—Å—Ç–æ—Ç–∏ —Å–ª—ñ–≤ —É —Ç–µ–∫—Å—Ç—ñ."""
    text = remove_punctuation(text)
    words = text.split()

    if search_words:
        words = [word for word in words if word.lower() in search_words]

    with ThreadPoolExecutor() as executor:
        mapped_values = list(executor.map(map_function, words))

    shuffled_values = shuffle_function(mapped_values)

    with ThreadPoolExecutor() as executor:
        reduced_values = list(executor.map(reduce_function, shuffled_values))

    return dict(reduced_values)

def visualize_top_words(word_counts, top_n=10):
    """–í—ñ–∑—É–∞–ª—ñ–∑—É—î —Ç–æ–ø N —Å–ª—ñ–≤ –∑–∞ —á–∞—Å—Ç–æ—Ç–æ—é –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è."""
    sorted_words = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)[:top_n]

    words, counts = zip(*sorted_words)
    
    plt.figure(figsize=(10, 5))
    plt.bar(words, counts, color='skyblue')
    plt.xlabel("–°–ª–æ–≤–∞")
    plt.ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Ö–æ–¥–∂–µ–Ω—å")
    plt.title(f"–¢–æ–ø-{top_n} –Ω–∞–π–±—ñ–ª—å—à —É–∂–∏–≤–∞–Ω–∏—Ö —Å–ª—ñ–≤")
    plt.xticks(rotation=45)
    plt.show()

if __name__ == '__main__':
    url = "https://gutenberg.net.au/ebooks01/0100021.txt"
    text = get_text(url)

    if text:
        result = map_reduce(text)

        print("üî¢ –¢–æ–ø-10 —Å–ª—ñ–≤ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é —á–∞—Å—Ç–æ—Ç–æ—é:")
        sorted_result = sorted(result.items(), key=lambda x: x[1], reverse=True)[:10]
        for word, count in sorted_result:
            print(f"{word}: {count}")

        visualize_top_words(result, top_n=10)